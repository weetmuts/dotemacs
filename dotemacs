;;
;; Fredrik Öhrström's new generation .emacs file!
;;
;; As a whole, licensed to you under the simplified BSD 2-clause license.
;; But please feel free to copy any parts you find nice you find here.
;;

;; First invoke 'compile and set command line.
;; Then trigger recompile C-c C-c (press and hold ctrl then type c twice.)
;; Next error: Ctrl-PageDown
;; Prev error: Ctrl-PageUp

(add-to-list 'load-path "~/.emacs.d/lisp/")

(require 'smart-tab)

(global-smart-tab-mode 1)

;(defun buffer-background-red ()
;  (interactive)
;  (load-theme 'deeper-blue)
;  (set-face-foreground 'font-lock-comment-face "brightyellow")
;  (set-face-foreground 'font-lock-comment-delimiter-face "brightyellow"))

(set-language-environment "UTF-8")
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

;; Enable whitespace mode to show trailing whitespace
(global-set-key "\C-c_w" 'whitespace-mode)
(global-set-key "\C-c_t" 'whitespace-toggle-options)

;; disable lockfiles
;; see http://www.gnu.org/software/emacs/manual/html_node/emacs/Interlocking.html
(setq create-lockfiles nil)

;; store all backup files in the tmp dir
;; http://www.gnu.org/software/emacs/manual/html_node/emacs/Backup-Names.html
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))

;; store all autosave files in the tmp dir
;; http://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Save-Files.html
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; autosave the undo-tree history
(setq undo-tree-history-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq undo-tree-auto-save-history t)

;; Clean out any trailing whitespace in files before saving.
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(setq c-default-style "bsd" c-basic-offset 4)
;;(setq c-default-style "linux" c-basic-offset 4)

;;(c-set-offset 'access-label 0)
;;(c-set-offset 'label 0)

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(global-set-key (kbd "C-c C-c") 'find-makefile-then-compile)

;;(put 'scroll-left 'disabled nil)

(load-library "hideshow")
(global-set-key (kbd "M-<up>") 'hs-show-all)
(global-set-key (kbd "M-<down>") 'hs-hide-all)
(global-set-key (kbd "M-<RET>") 'hs-toggle-hiding)
;;(global-set-key (kbd "C-\\") 'toggle-selective-display)

(add-hook 'c-mode-common-hook   'hs-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
(add-hook 'java-mode-hook       'hs-minor-mode)
(add-hook 'lisp-mode-hook       'hs-minor-mode)
(add-hook 'perl-mode-hook       'hs-minor-mode)
(add-hook 'sh-mode-hook         'hs-minor-mode)

(defun find-makefile-then-compile ()
  "Travel up the path, find a Makefile and `compile'."
  (interactive)
  (when (locate-dominating-file default-directory "Makefile")
    (with-temp-buffer
      (cd (locate-dominating-file default-directory "Makefile"))
      (recompile))))

(defun find-makefile-then-ag (lookfor)
  "Travel up the path, find a Makefile and `ag'."
  (interactive "sSilver search: ")
  (with-temp-buffer
    (ag lookfor (locate-dominating-file default-directory "Makefile"))))

(defun find-makefile-then-ag-dired (lookfor)
  "Travel up the path, find a Makefile and `ag-dired'."
  (interactive "sSilver search file: ")
  (with-temp-buffer
    (ag-dired (locate-dominating-file default-directory "Makefile") lookfor)))


(global-unset-key (kbd "C-<next>"))
(global-unset-key (kbd "C-<prior>"))

(global-set-key (kbd "C-<next>") 'next-error)
(global-set-key (kbd "C-<prior>") 'previous-error)

(add-hook
 'c++-mode-hook
 (lambda ()
   (local-set-key (kbd "C-c C-c") #'find-makefile-then-compile)))


(add-hook
 'c-mode-hook
 (lambda ()
   (local-set-key (kbd "C-c C-c") #'find-makefile-then-compile)))

(add-hook
 'makefile-mode-hook
 (lambda ()
   (local-set-key (kbd "C-c C-c") #'find-makefile-then-compile)))

(add-hook
 'java-mode-hook
 (lambda ()
   (local-set-key (kbd "C-c C-c") #'find-makefile-then-compile)))

(put 'downcase-region 'disabled nil)

(defun search-for-mytext () (interactive)
       (let* ( (searchterm (read-string "Search term: " ""))
               (result (shell-command-to-string (concat "find . -name " searchterm))))

         (get-buffer-create 'searchinn)
         (switch-to-buffer 'searchinn)
         (insert result)))

(global-set-key "\M-s" 'search-for-mytext)

(global-set-key "\C-x\C-x" 'find-makefile-then-ag)
(global-unset-key "\C-n");
(global-set-key "\C-n\C-n" 'find-makefile-then-ag-dired)
(global-set-key [(meta left)] 'hippie-expand)

(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  ;;(add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
(package-initialize)

;; Hide the menu bar
(menu-bar-mode -1)

(add-to-list 'auto-mode-alist '("\\.hbs\\'" . html-mode))

(set-face-foreground 'font-lock-comment-face "yellow")

;;load-theme 'misterioso t

(setq compilation-scroll-output t)
